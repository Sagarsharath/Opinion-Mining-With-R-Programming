library(twitteR) ### for fetching the tweets
library(plyr) ## for breaking the data into manageable pieces
library(ROAuth) # for R authentication
library(stringr) # for string processing
library(ggplot2) # for plotting the results


reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
api_key <- "t72xq4xFLEyzdcWvZeKXUotBU"
api_secret <- "Z44JVhK3lTU3bSJLc0i8nz22PrAwcuJKPUPXzYc0ydBcGdPnGB"
access_token <- "3142883369-nmmMOqDQ0IdgUltXZO3f9AYMOsW4WXfEqGsLtw6"
access_token_secret <- "11R3URpCWdY7ACkzIQdZlEWQlY44sQTpKTSspfHqGttgP"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)




posText <- read.delim("C:/Users/sagar/Desktop/r/pvw/positive-words.txt", header=FALSE, stringsAsFactors=FALSE)
posText <- posText$V1
posText <- unlist(lapply(posText, function(x) { str_split(x, "\n") }))
negText <- read.delim("C:/Users/sagar/Desktop/r/nvw/negative-words.txt", header=FALSE, stringsAsFactors=FALSE)
negText <- negText$V1
negText <- unlist(lapply(negText, function(x) { str_split(x, "\n") }))
pos.words = c(posText, 'upgrade')
neg.words = c(negText, 'wtf', 'wait', 'waiting','epicfail', 'mechanical')


amazon_tweets = searchTwitter('@amazon', n=1000)
snapdeal_tweets = searchTwitter('@snapdeal', n=1000)
flipkart_tweets = searchTwitter('@flipkart', n=1000)

amazon_txt = sapply(amazon_tweets, function(t) t$getText() )
snapdeal_txt = sapply(snapdeal_tweets, function(t) t$getText() )
flipkart_txt = sapply(flipkart_tweets, function(t) t$getText() )

noof_tweets = c(length(amazon_txt), length(snapdeal_txt),length(flipkart_txt))
ecommerce<- c(amazon_txt,snapdeal_txt,flipkart_txt)


score.sentiment = function(sentences, pos.words, neg.words, .progress='none')
{
# Parameters
# sentences: vector of text to score
# pos.words: vector of words of positive sentiment
# neg.words: vector of words of negative sentiment
# .progress: passed to laply() to control of progress bar
# create a simple array of scores with laply
scores = laply(sentences,
function(sentence, pos.words, neg.words)
{
# remove punctuation
sentence = gsub("[[:punct:]]", "", sentence)
# remove control characters
sentence = gsub("[[:cntrl:]]", "", sentence)
# remove digits?
sentence = gsub('\\d+', '', sentence)
# define error handling function when trying tolower
tryTolower = function(x)
{
# create missing value
y = NA
# tryCatch error
try_error = tryCatch(tolower(x), error=function(e) e)
# if not an error
if (!inherits(try_error, "error"))
y = tolower(x)
# result
return(y)
}
# use tryTolower with sapply 
sentence = sapply(sentence, tryTolower)
# split sentence into words with str_split (stringr package)
word.list = str_split(sentence, "\\s+")
words = unlist(word.list)
# compare words to the dictionaries of positive & negative terms
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
# get the position of the matched term or NA
# we just want a TRUE/FALSE
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
# final score
score = sum(pos.matches) - sum(neg.matches)
return(score)
}, pos.words, neg.words, .progress=.progress )
# data frame with scores for each sentence
scores.df = data.frame(text=sentences, score=scores)
return(scores.df)
}



scores = score.sentiment(ecommerce, pos.words,neg.words , .progress='text')


scores$ecommerce= factor(rep(c("amazon", "snapdeal","flipkart"), noof_tweets))


scores$positive <- as.numeric(scores$score >0)
scores$negative <- as.numeric(scores$score >0)
scores$neutral <- as.numeric(scores$score==0)

amazon_ecommerce <- subset(scores, scores$ecommerce=="amazon")
snapdeal_ecommerce <- subset(scores, scores$ecommerce=="snapdeal")
flipkart_ecommerce <- subset(scores, scores$ecommerce=="flipkart")

amazon_ecommerce$polarity <- ifelse(amazon_ecommerce$score >0,"positive",ifelse(amazon_ecommerce$score < 0,"negative",ifelse(amazon_ecommerce$score==0,"Neutral",0)))

snapdeal_ecommerce$polarity <- ifelse(snapdeal_ecommerce$score >0,"positive",ifelse(snapdeal_ecommerce$score < 0,"negative",ifelse(snapdeal_ecommerce$score==0,"Neutral",0)))

flipkart_ecommerce$polarity <- ifelse(flipkart_ecommerce$score >0,"positive",ifelse(flipkart_ecommerce$score < 0,"negative",ifelse(flipkart_ecommerce$score==0,"Neutral",0)))

### to plot polarity of amazon ####
qplot(factor(polarity), data=amazon_ecommerce, geom="bar", fill=factor(polarity))+xlab("Polarity Categories") + ylab("Frequency") + ggtitle("Customer Sentiments - Amazon ")


### score plot ..amazon##
qplot(factor(score), data=amazon_ecommerce, geom="bar", fill=factor(score))+xlab("Sentiment Score") + ylab("Frequency") + ggtitle("Customer Sentiment Scores - Amazon")

## snapdeal##
qplot(factor(polarity), data=snapdeal_ecommerce, geom="bar", fill=factor(polarity))+xlab("Polarity Categories") + ylab("Frequency") + ggtitle(" Customer Sentiments - Snapdeal ")

qplot(factor(score), data=snapdeal_ecommerce, geom="bar", fill=factor(score))+xlab("Sentiment Score") + ylab("Frequency") + ggtitle("Customer Sentiment Scores - Snapdeal")

## flipkart##
qplot(factor(polarity), data=flipkart_ecommerce, geom="bar", fill=factor(polarity))+xlab("Polarity Categories") + ylab("Frequency") + ggtitle("Customer Sentiments - Flipkart")
qplot(factor(score), data=flipkart_ecommerce, geom="bar", fill=factor(score))+xlab("Sentiment Score") + ylab("Frequency") + ggtitle("Customer Sentiment Scores - Flipkart ")



## summarize ##
df = ddply(scores, c("ecommerce"), summarise,
pos_count=sum( positive ),
neg_count=sum( negative ),
neu_count=sum(neutral))

df$total_count = df$pos_count +df$neg_count + df$neu_count

df$pos_prcnt_score = round( 100 * df$pos_count / df$total_count )
df$neg_prcnt_score = round( 100 * df$neg_count / df$total_count )
df$neu_prcnt_score = round( 100 * df$neu_count / df$total_count )


#### comparison charts ##
## positive
attach(df)
lbls <-paste(df$ecommerce,df$pos_prcnt_score)
lbls <- paste(lbls,"%",sep="")
pie(pos_prcnt_score, labels = lbls, col = rainbow(length(lbls)), main = "Positive Comparative Analysis - e-commerce sites")

## negative
lbls <-paste(df$ecommerce,df$neg_prcnt_score)
lbls <- paste(lbls,"%",sep="")
pie(neg_prcnt_score, labels = lbls, col = rainbow(length(lbls)), main = " Negative Comparative Analysis - e-commerce sites")

## neutral
lbls <-paste(df$ecommerce,df$neu_prcnt_score)
lbls <- paste(lbls,"%",sep="")
pie(neu_prcnt_score, labels = lbls, col = rainbow(length(lbls)), main = "Neutral Comparative Analysis - e-commerce sites")

